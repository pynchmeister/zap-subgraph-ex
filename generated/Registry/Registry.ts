// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewProvider extends ethereum.Event {
  get params(): NewProvider__Params {
    return new NewProvider__Params(this);
  }
}

export class NewProvider__Params {
  _event: NewProvider;

  constructor(event: NewProvider) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get title(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class NewCurve extends ethereum.Event {
  get params(): NewCurve__Params {
    return new NewCurve__Params(this);
  }
}

export class NewCurve__Params {
  _event: NewCurve;

  constructor(event: NewCurve) {
    this._event = event;
  }

  get provider(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get endpoint(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get curve(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get broker(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Registry extends ethereum.SmartContract {
  static bind(address: Address): Registry {
    return new Registry("Registry", address);
  }

  isProviderInitiated(oracleAddress: Address): boolean {
    let result = super.call(
      "isProviderInitiated",
      "isProviderInitiated(address):(bool)",
      [ethereum.Value.fromAddress(oracleAddress)]
    );

    return result[0].toBoolean();
  }

  try_isProviderInitiated(
    oracleAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isProviderInitiated",
      "isProviderInitiated(address):(bool)",
      [ethereum.Value.fromAddress(oracleAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getProviderCurve(provider: Address, endpoint: Bytes): Array<BigInt> {
    let result = super.call(
      "getProviderCurve",
      "getProviderCurve(address,bytes32):(int256[])",
      [
        ethereum.Value.fromAddress(provider),
        ethereum.Value.fromFixedBytes(endpoint)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_getProviderCurve(
    provider: Address,
    endpoint: Bytes
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getProviderCurve",
      "getProviderCurve(address,bytes32):(int256[])",
      [
        ethereum.Value.fromAddress(provider),
        ethereum.Value.fromFixedBytes(endpoint)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  initiateProviderCurve(
    endpoint: Bytes,
    curve: Array<BigInt>,
    broker: Address
  ): boolean {
    let result = super.call(
      "initiateProviderCurve",
      "initiateProviderCurve(bytes32,int256[],address):(bool)",
      [
        ethereum.Value.fromFixedBytes(endpoint),
        ethereum.Value.fromSignedBigIntArray(curve),
        ethereum.Value.fromAddress(broker)
      ]
    );

    return result[0].toBoolean();
  }

  try_initiateProviderCurve(
    endpoint: Bytes,
    curve: Array<BigInt>,
    broker: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "initiateProviderCurve",
      "initiateProviderCurve(bytes32,int256[],address):(bool)",
      [
        ethereum.Value.fromFixedBytes(endpoint),
        ethereum.Value.fromSignedBigIntArray(curve),
        ethereum.Value.fromAddress(broker)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAllProviderParams(provider: Address): Array<Bytes> {
    let result = super.call(
      "getAllProviderParams",
      "getAllProviderParams(address):(bytes32[])",
      [ethereum.Value.fromAddress(provider)]
    );

    return result[0].toBytesArray();
  }

  try_getAllProviderParams(
    provider: Address
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAllProviderParams",
      "getAllProviderParams(address):(bytes32[])",
      [ethereum.Value.fromAddress(provider)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  db(): Address {
    let result = super.call("db", "db():(address)", []);

    return result[0].toAddress();
  }

  try_db(): ethereum.CallResult<Address> {
    let result = super.tryCall("db", "db():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProviderParameter(provider: Address, key: Bytes): Bytes {
    let result = super.call(
      "getProviderParameter",
      "getProviderParameter(address,bytes32):(bytes)",
      [ethereum.Value.fromAddress(provider), ethereum.Value.fromFixedBytes(key)]
    );

    return result[0].toBytes();
  }

  try_getProviderParameter(
    provider: Address,
    key: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getProviderParameter",
      "getProviderParameter(address,bytes32):(bytes)",
      [ethereum.Value.fromAddress(provider), ethereum.Value.fromFixedBytes(key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getProviderPublicKey(provider: Address): BigInt {
    let result = super.call(
      "getProviderPublicKey",
      "getProviderPublicKey(address):(uint256)",
      [ethereum.Value.fromAddress(provider)]
    );

    return result[0].toBigInt();
  }

  try_getProviderPublicKey(provider: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProviderPublicKey",
      "getProviderPublicKey(address):(uint256)",
      [ethereum.Value.fromAddress(provider)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProviderTitle(provider: Address): Bytes {
    let result = super.call(
      "getProviderTitle",
      "getProviderTitle(address):(bytes32)",
      [ethereum.Value.fromAddress(provider)]
    );

    return result[0].toBytes();
  }

  try_getProviderTitle(provider: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getProviderTitle",
      "getProviderTitle(address):(bytes32)",
      [ethereum.Value.fromAddress(provider)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getCurveUnset(provider: Address, endpoint: Bytes): boolean {
    let result = super.call(
      "getCurveUnset",
      "getCurveUnset(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(provider),
        ethereum.Value.fromFixedBytes(endpoint)
      ]
    );

    return result[0].toBoolean();
  }

  try_getCurveUnset(
    provider: Address,
    endpoint: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getCurveUnset",
      "getCurveUnset(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(provider),
        ethereum.Value.fromFixedBytes(endpoint)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAllOracles(): Array<Address> {
    let result = super.call("getAllOracles", "getAllOracles():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getAllOracles(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllOracles",
      "getAllOracles():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getPublicKey(provider: Address): BigInt {
    let result = super.call("getPublicKey", "getPublicKey(address):(uint256)", [
      ethereum.Value.fromAddress(provider)
    ]);

    return result[0].toBigInt();
  }

  try_getPublicKey(provider: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPublicKey",
      "getPublicKey(address):(uint256)",
      [ethereum.Value.fromAddress(provider)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProviderCurveLength(provider: Address, endpoint: Bytes): BigInt {
    let result = super.call(
      "getProviderCurveLength",
      "getProviderCurveLength(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(provider),
        ethereum.Value.fromFixedBytes(endpoint)
      ]
    );

    return result[0].toBigInt();
  }

  try_getProviderCurveLength(
    provider: Address,
    endpoint: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProviderCurveLength",
      "getProviderCurveLength(address,bytes32):(uint256)",
      [
        ethereum.Value.fromAddress(provider),
        ethereum.Value.fromFixedBytes(endpoint)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOracleAddress(index: BigInt): Address {
    let result = super.call(
      "getOracleAddress",
      "getOracleAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_getOracleAddress(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getOracleAddress",
      "getOracleAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getEndpointBroker(oracleAddress: Address, endpoint: Bytes): Address {
    let result = super.call(
      "getEndpointBroker",
      "getEndpointBroker(address,bytes32):(address)",
      [
        ethereum.Value.fromAddress(oracleAddress),
        ethereum.Value.fromFixedBytes(endpoint)
      ]
    );

    return result[0].toAddress();
  }

  try_getEndpointBroker(
    oracleAddress: Address,
    endpoint: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getEndpointBroker",
      "getEndpointBroker(address,bytes32):(address)",
      [
        ethereum.Value.fromAddress(oracleAddress),
        ethereum.Value.fromFixedBytes(endpoint)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProviderEndpoints(provider: Address): Array<Bytes> {
    let result = super.call(
      "getProviderEndpoints",
      "getProviderEndpoints(address):(bytes32[])",
      [ethereum.Value.fromAddress(provider)]
    );

    return result[0].toBytesArray();
  }

  try_getProviderEndpoints(
    provider: Address
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getProviderEndpoints",
      "getProviderEndpoints(address):(bytes32[])",
      [ethereum.Value.fromAddress(provider)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  initiateProvider(publicKey: BigInt, title: Bytes): boolean {
    let result = super.call(
      "initiateProvider",
      "initiateProvider(uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(publicKey),
        ethereum.Value.fromFixedBytes(title)
      ]
    );

    return result[0].toBoolean();
  }

  try_initiateProvider(
    publicKey: BigInt,
    title: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "initiateProvider",
      "initiateProvider(uint256,bytes32):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(publicKey),
        ethereum.Value.fromFixedBytes(title)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getEndpointParams(provider: Address, endpoint: Bytes): Array<Bytes> {
    let result = super.call(
      "getEndpointParams",
      "getEndpointParams(address,bytes32):(bytes32[])",
      [
        ethereum.Value.fromAddress(provider),
        ethereum.Value.fromFixedBytes(endpoint)
      ]
    );

    return result[0].toBytesArray();
  }

  try_getEndpointParams(
    provider: Address,
    endpoint: Bytes
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getEndpointParams",
      "getEndpointParams(address,bytes32):(bytes32[])",
      [
        ethereum.Value.fromAddress(provider),
        ethereum.Value.fromFixedBytes(endpoint)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getTitle(provider: Address): Bytes {
    let result = super.call("getTitle", "getTitle(address):(bytes32)", [
      ethereum.Value.fromAddress(provider)
    ]);

    return result[0].toBytes();
  }

  try_getTitle(provider: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getTitle", "getTitle(address):(bytes32)", [
      ethereum.Value.fromAddress(provider)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class InitiateProviderCurveCall extends ethereum.Call {
  get inputs(): InitiateProviderCurveCall__Inputs {
    return new InitiateProviderCurveCall__Inputs(this);
  }

  get outputs(): InitiateProviderCurveCall__Outputs {
    return new InitiateProviderCurveCall__Outputs(this);
  }
}

export class InitiateProviderCurveCall__Inputs {
  _call: InitiateProviderCurveCall;

  constructor(call: InitiateProviderCurveCall) {
    this._call = call;
  }

  get endpoint(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get curve(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get broker(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class InitiateProviderCurveCall__Outputs {
  _call: InitiateProviderCurveCall;

  constructor(call: InitiateProviderCurveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetProviderParameterCall extends ethereum.Call {
  get inputs(): SetProviderParameterCall__Inputs {
    return new SetProviderParameterCall__Inputs(this);
  }

  get outputs(): SetProviderParameterCall__Outputs {
    return new SetProviderParameterCall__Outputs(this);
  }
}

export class SetProviderParameterCall__Inputs {
  _call: SetProviderParameterCall;

  constructor(call: SetProviderParameterCall) {
    this._call = call;
  }

  get key(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get value(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetProviderParameterCall__Outputs {
  _call: SetProviderParameterCall;

  constructor(call: SetProviderParameterCall) {
    this._call = call;
  }
}

export class UpdateDependenciesCall extends ethereum.Call {
  get inputs(): UpdateDependenciesCall__Inputs {
    return new UpdateDependenciesCall__Inputs(this);
  }

  get outputs(): UpdateDependenciesCall__Outputs {
    return new UpdateDependenciesCall__Outputs(this);
  }
}

export class UpdateDependenciesCall__Inputs {
  _call: UpdateDependenciesCall;

  constructor(call: UpdateDependenciesCall) {
    this._call = call;
  }
}

export class UpdateDependenciesCall__Outputs {
  _call: UpdateDependenciesCall;

  constructor(call: UpdateDependenciesCall) {
    this._call = call;
  }
}

export class ClearEndpointCall extends ethereum.Call {
  get inputs(): ClearEndpointCall__Inputs {
    return new ClearEndpointCall__Inputs(this);
  }

  get outputs(): ClearEndpointCall__Outputs {
    return new ClearEndpointCall__Outputs(this);
  }
}

export class ClearEndpointCall__Inputs {
  _call: ClearEndpointCall;

  constructor(call: ClearEndpointCall) {
    this._call = call;
  }

  get endpoint(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ClearEndpointCall__Outputs {
  _call: ClearEndpointCall;

  constructor(call: ClearEndpointCall) {
    this._call = call;
  }
}

export class SelfDestructCall extends ethereum.Call {
  get inputs(): SelfDestructCall__Inputs {
    return new SelfDestructCall__Inputs(this);
  }

  get outputs(): SelfDestructCall__Outputs {
    return new SelfDestructCall__Outputs(this);
  }
}

export class SelfDestructCall__Inputs {
  _call: SelfDestructCall;

  constructor(call: SelfDestructCall) {
    this._call = call;
  }
}

export class SelfDestructCall__Outputs {
  _call: SelfDestructCall;

  constructor(call: SelfDestructCall) {
    this._call = call;
  }
}

export class InitiateProviderCall extends ethereum.Call {
  get inputs(): InitiateProviderCall__Inputs {
    return new InitiateProviderCall__Inputs(this);
  }

  get outputs(): InitiateProviderCall__Outputs {
    return new InitiateProviderCall__Outputs(this);
  }
}

export class InitiateProviderCall__Inputs {
  _call: InitiateProviderCall;

  constructor(call: InitiateProviderCall) {
    this._call = call;
  }

  get publicKey(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get title(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class InitiateProviderCall__Outputs {
  _call: InitiateProviderCall;

  constructor(call: InitiateProviderCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class SetProviderTitleCall extends ethereum.Call {
  get inputs(): SetProviderTitleCall__Inputs {
    return new SetProviderTitleCall__Inputs(this);
  }

  get outputs(): SetProviderTitleCall__Outputs {
    return new SetProviderTitleCall__Outputs(this);
  }
}

export class SetProviderTitleCall__Inputs {
  _call: SetProviderTitleCall;

  constructor(call: SetProviderTitleCall) {
    this._call = call;
  }

  get title(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetProviderTitleCall__Outputs {
  _call: SetProviderTitleCall;

  constructor(call: SetProviderTitleCall) {
    this._call = call;
  }
}

export class SetEndpointParamsCall extends ethereum.Call {
  get inputs(): SetEndpointParamsCall__Inputs {
    return new SetEndpointParamsCall__Inputs(this);
  }

  get outputs(): SetEndpointParamsCall__Outputs {
    return new SetEndpointParamsCall__Outputs(this);
  }
}

export class SetEndpointParamsCall__Inputs {
  _call: SetEndpointParamsCall;

  constructor(call: SetEndpointParamsCall) {
    this._call = call;
  }

  get endpoint(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get endpointParams(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }
}

export class SetEndpointParamsCall__Outputs {
  _call: SetEndpointParamsCall;

  constructor(call: SetEndpointParamsCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get c(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
